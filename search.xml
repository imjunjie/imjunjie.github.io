<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hexo文章中图片点击全屏查看]]></title>
    <url>%2Fhexo-wen-zhang-zhong-tu-pian-dian-ji-quan-ping-cha-kan.html</url>
    <content type="text"><![CDATA[hexo中实现类似于微信公众号中，点击图片方法全屏查看，再点击后回到原来的状态。 效果如下,点击下图的图片放大查看。123|1|2|3||--|--|--||![](http://qnfile.devzhao.com/blog/2018-10-16-155439.png)|![](http://qnfile.devzhao.com/blog/2018-10-16-155529.png)|![](http://qnfile.devzhao.com/blog/2018-10-16-155650.jpg)| 实现的效果如下： 1 2 3 1.修改 post-details.js 文件 文件目录：123devzhao.com/themes/next/source/js/src/post-details.jsdevzhao.com是我的站点根目录。 在文件最后添加：123456789101112131415161718192021222324252627//----自定义js----------------function createImgEventFullScreen() &#123; var imgs = $(".post-body").find("img"); console.log(imgs); for(var i = 0;i &lt; imgs.length;i++) &#123; // $(imgs[i]).click(createCover(imgs[i])); imgs[i].onclick= function(e) &#123; var src = e.srcElement.currentSrc; createCover(src) &#125; &#125; function createCover (src) &#123; console.log(src); var cover = $("&lt;div id='fullScreenCover' class='zhao-cover-img-container'&gt;&lt;img class='zhao-cover-img' src='"+src+"'/&gt;&lt;/div&gt;"); $("#fullScreenCover").remove(); $("body").append(cover); $("body").addClass("zhao-no-scroll"); $("#fullScreenCover").click(function()&#123; $("#fullScreenCover").remove(); $("body").removeClass("zhao-no-scroll"); &#125;) &#125;&#125;setTimeout(function()&#123; createImgEventFullScreen();&#125;,1000) 2.修改custom.styl文件 文件目录： 1devzhao.com/themes/next/source/css/_custom/custom.styl 在最后添加 1234567891011121314151617181920212223.zhao-cover-img-container&#123; position: fixed; top: 0; left: 0; width: 100%; height: 100vh; z-index: 10002; text-align: center; background-color: #000; overflow-y: scroll;&#125;.zhao-cover-img&#123; width: 100%; position: absolute; top: 0; bottom: 0;&#125;.zhao-no-scroll&#123; width: 100%; height: 100vh; overflow: hidden;&#125; 3.修改blog-encrypt.js文件 如果你安装了hexo-blog-encrypt插件，需要做这一步。 文件目录：1devzhao.com/node_modules/hexo-blog-encrypt/lib/blog-encrypt.js 找到如下代码1$('#encrypt-blog').html(content); 在后面加上这行代码：1createImgEventFullScreen(); 如下图: 上面代码还有些问题： 还有点小问题，比如第三个图片，电脑上打开，头顶上和底部有一些显示不全。 在微信中打开第二个图，向上滑的时候，底下的层会跟着滑动（好像在微信里面，禁用滑动，没生效），手机Safari中也没有生效 参考文献 hexo文章中图片点击全屏查看]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 添加背景图片并自适应]]></title>
    <url>%2Fhexo-tian-jia-bei-jing-tu-pian-bing-zi-gua-ying.html</url>
    <content type="text"><![CDATA[修改过程 在站点配置文件夹source/images/放入你的背景图片 然后修改主题文件夹themes/source/css/_custom/custom.stylPS: 这个文件是存放用户自定义css样式的在custom.styl开头加入如下的代码 body { background:url(/images/background.jpg); background-repeat: no-repeat; background-attachment:fixed; background-position:50% 50%; background-size: cover; -webkit-background-size: cover; -o-background-size: cover; -moz-background-size: cover; -ms-background-size: cover; /*这是设置底部文字, 看个人需要修改*/ #footer > div > div { color:#eee; } } 参考文献 Hexo 添加背景图片并自适应_20181231]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo里面Markdown对图片进行居中、设置大小]]></title>
    <url>%2Fhexo-li-mian-markdown-dui-tu-pian-jin-xing-ju-zhong-she-zhi-da-xiao.html</url>
    <content type="text"><![CDATA[标准的markdown中提供了图片的设置大小的操作，但是在本地把图片编辑好的代码生成静态文件发现图片不能显示了。 以后的hexo版本希望能够解决这个问题。 一般的markdown语法设置图片大小标准的markdown，在图片后面加上 “=200x300” (200是宽度，300是高度，也可以之定义宽度)，就能实现下面的效果。但是此版本的hexo不行。1![](https://mir-s3-cdn-cf.behance.net/project_modules/max_1200/36aa3462013499.5b14f258e6347.jpg =200x300) 图片的宽度和高度同时修改：1&lt;img width=80% src="http://qnfile.devzhao.com/blog/2018-10-22-120649.png" &gt; 1&lt;img width=500 src="http://qnfile.devzhao.com/blog/2018-10-22-120649.png" &gt; 使用img标签，设置图片大小直接在markdown中使用HTML标签，多数markdown工具都支持。1&lt;img width=200 src="http://qnfile.devzhao.com/blog/2018-10-22-jhk-1540210533410.jpeg" &gt; 当然简单学习一下html和css，你能做出更好的效果。 图片居中markdown目前没有支持图片居中的，所有的图片要么是100%宽度，支持设置大小的markdown一般也是左对齐的，所以居中只能靠HTML标签了。123&lt;div align=center&gt;![](http://qnfile.devzhao.com/blog/2018-10-22-jhk-1540210533410.jpeg =200x)&lt;/div&gt; 效果如下： 或者：123&lt;div align=center&gt; &lt;img width=200 src="http://qnfile.devzhao.com/blog/2018-10-22-jhk-1540210533410.jpeg" &gt;&lt;/div&gt; 效果如下： 没有解决，图片的左对齐，右对齐。默认地，图片统一居中显示。123&lt;div align=left&gt;![](http://qnfile.devzhao.com/blog/2018-10-22-jhk-1540210533410.jpeg =200x)&lt;/div&gt; 效果如下： 或者：123&lt;div align=left&gt; &lt;img width=200 src="http://qnfile.devzhao.com/blog/2018-10-22-jhk-1540210533410.jpeg" &gt;&lt;/div&gt; 效果如下： 参考文献 hexo里面Markdown对图片进行居中、设置大小_20181022]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo-Next搭建个人博客（代码块复制功能）]]></title>
    <url>%2Fhexo-next-da-jian-ge-ren-bo-ke-dai-ma-kuai-fu-zhi-gong-neng.html</url>
    <content type="text"><![CDATA[为了提高博客代码块的用户体验，仅仅代码高亮还不行，最好还能一键复制代码。故此文将讲述Hexo NexT主题博客的代码块复制功能配置。 下载 clipboard.js三方插件 clipboardjs ，相关介绍和兼容性我就不赘述了，去它主页或github上看。 下载地址： clipboard.js clipboard.min.js 推荐 保存文件clipboard.js / clipboard.min.js，目录如下：.\themes\next\source\js\src clipboardjs 使用也是在.\themes\next\source\js\src目录下，创建clipboard-use.js，文件内容如下：123456789101112131415161718 /*页面载入完成后，创建复制按钮*/ !function (e, t, a) &#123; /* code */ var initCopyCode = function()&#123; var copyHtml = ''; copyHtml += '&lt;button class="btn-copy" data-clipboard-snippet=""&gt;'; //fa fa-globe可以去字体库替换自己想要的图标copyHtml += ' &lt;i class="fa fa-clipboard"&gt;&lt;/i&gt;&lt;span&gt;copy&lt;/span&gt;'; copyHtml += '&lt;/button&gt;'; $(".highlight .code pre").before(copyHtml); new ClipboardJS('.btn-copy', &#123; target: function(trigger) &#123; return trigger.nextElementSibling; &#125; &#125;); &#125; initCopyCode(); &#125;(window, document); 在.\themes\next\source\css_custom\custom.styl样式文件中添加下面代码： 123456789101112131415161718192021222324252627282930313233343536 //代码块复制按钮.highlight&#123; //方便copy代码按钮（btn-copy）的定位 position: relative;&#125;.btn-copy &#123; display: inline-block; cursor: pointer; background-color: #eee; background-image: linear-gradient(#fcfcfc,#eee); border: 1px solid #d5d5d5; border-radius: 3px; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; -webkit-appearance: none; font-size: 13px; font-weight: 700; line-height: 20px; color: #333; -webkit-transition: opacity .3s ease-in-out; -o-transition: opacity .3s ease-in-out; transition: opacity .3s ease-in-out; padding: 2px 6px; position: absolute; right: 5px; top: 5px; opacity: 0;&#125;.btn-copy span &#123; margin-left: 5px;&#125;.highlight:hover .btn-copy&#123; opacity: 1;&#125; 引用在.\themes\next\layout\_layout.swig文件中，添加引用（注：在 swig 末尾或 body 结束标签（&lt;/body&gt;）之前添加）：123&lt;!-- 代码块复制功能 --&gt;&lt;script type="text/javascript" src="/js/src/clipboard.min.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="/js/src/clipboard-use.js"&gt;&lt;/script&gt; 补充懂代码的也可以将clipboard.min.js和clipboard-use.js合并为一个文件，再在.\themes\next\layout\_layout.swig文件中使用。当然clipboard.min.js也可以直接用三方cdn的方式引入也行。 参考文献 Hexo-Next搭建个人博客（代码块复制功能）]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[字数统计和阅读时长(网站底部/文章内)]]></title>
    <url>%2Fzi-shu-tong-ji-he-yue-du-shi-chang-wang-zhan-di-bu-wen-zhang-nei.html</url>
    <content type="text"><![CDATA[字数统计和阅读时长（旧版本新版本） 插件地址: hexo-symbols-count-time 安装插件: 1npm install hexo-symbols-count-time --save 修改 站点配置文件 1234567symbols_count_time: #文章内是否显示 symbols: true time: true # 网页底部是否显示 total_symbols: true total_time: true 修改 主题配置文件 123456789101112# Post wordcount display settings# Dependencies: https://github.com/theme-next/hexo-symbols-count-timesymbols_count_time: separated_meta: true #文章中的显示是否显示文字（本文字数|阅读时长） item_text_post: true #网页底部的显示是否显示文字（站点总字数|站点阅读时长） item_text_total: false # Average Word Length (chars count in word) awl: 4 # Words Per Minute wpm: 275 参考文献 字数统计和阅读时长]]></content>
  </entry>
  <entry>
    <title><![CDATA[在Hexo中添加LaTex公式]]></title>
    <url>%2Fzai-hexo-zhong-tian-jia-latex-gong-shi.html</url>
    <content type="text"><![CDATA[在Hexo中渲染MathJax数学公式在用markdown写技术文档时，免不了会碰到数学公式。常用的Markdown编辑器都会集成Mathjax，用来渲染文档中的类Latex格式书写的数学公式。基于Hexo搭建的个人博客，默认情况下渲染数学公式却会出现各种各样的问题。 代码编辑器，强烈推荐使用微软的 VS code，相比Atom开启迅速，使用方便，扩展丰富 原因Hexo默认使用”hexo-renderer-marked”引擎渲染网页，该引擎会把一些特殊的markdown符号转换为相应的html标签，比如在markdown语法中，下划线&#39;_&#39;代表斜体，会被渲染引擎处理为标签。 因为类Latex格式书写的数学公式下划线&#39;_&#39;表示下标，有特殊的含义，如果被强制转换为标签，那么MathJax引擎在渲染数学公式的时候就会出错。例如，$x_i$在开始被渲染的时候，处理为$xi$，这样MathJax引擎就认为该公式有语法错误，因为不会渲染。 类似的语义冲突的符号还包括&#39;*&#39;,&#39;{&#39;, &#39;}&#39;,&#39;\&#39;等。 解决方法解决方案有很多，可以网上搜下，为了节省大家的时间，这里只提供亲身测试过的最靠谱的方法。 第一步： 安装Kramed更换Hexo的markdown渲染引擎，hexo-renderer-kramed引擎是在默认的渲染引擎hexo-renderer-marked的基础上修改了一些bug，两者比较接近，也比较轻量级。12npm uninstall hexo-renderer-marked --savenpm install hexo-renderer-kramed --save 执行上面的命令即可，先卸载原来的渲染引擎，再安装新的。 第二步：更改文件配置打开/node_modules/hexo-renderer-kramed/lib/renderer.js，更改为，直接返回text： 改动前： 12345// Change inline math rulefunction formatText(text) &#123; // Fit kramed's rule: $$ + \1 + $$ return text.replace(/`\$(.*?)\$`/g, '$$$$$1$$$$');&#125; 改动后： 1234// Change inline math rulefunction formatText(text) &#123; return text;&#125; 第三步: 停止使用 hexo-math，并安装mathjax包卸载hexo-math1npm uninstall hexo-math --save 安装 hexo-renderer-mathjax 包1npm install hexo-renderer-mathjax --save 第四步: 更新 Mathjax 的 配置文件打开/node_modules/hexo-renderer-mathjax/mathjax.html如图所示更改&lt;script&gt;为：即注释掉&lt;script&gt;代码，并把以下代码复制到对应位置 更改前： 1&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML"&gt;&lt;/script&gt; 更改后： 1&lt;script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"&gt;&lt;/script&gt; 整体效果：12&lt;!-- &lt;script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"&gt;&lt;/script&gt; --&gt;&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML"&gt;&lt;/script&gt; 第五步: 更改默认转义规则因为LaTeX与markdown语法有语义冲突，所以hexo默认的转义规则会将一些字符进行转义，所以我们需要对默认的规则进行修改.打开/node_modules\kramed\lib\rules\inline.js 更改前： 1escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/, 更改后： 1escape: /^\\([`*\[\]()# +\-.!_&gt;])/, 2. 更改前： 1em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/, 更改后： 1em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/, 第六步: 开启mathjax打开/themes/yilia主题目录下的config.yml文件因为我用的yilia主题，所以路径是/themes/yilia 我们需要在_config.yml文件 中开启 Mathjax， 找到 mathjax 字段添加如下代码：(不同的主题配置方法略微有区别)12mathjax: enable: true 或者1mathjax: true 此外，还需要，更改当前文件下math: true 更改前： 12math: enable: false 更改后： 12math: enable: true 需要注意的是：无论是配置文件还是博客文件，配置项跟配置参数均有有一个空格，否则会配置失败例如：123mathjax: true（mathjax:空格true）而不是mathjax:true（mathjax:true） 写博客文件时，要开启 Mathjax选项，， 添加以下内容：1mathjax: true 例如：1234title: 特征提取——局部特征date: 2018-07-16 09:39:40tags: [GitHub, Mysql]mathjax: true 结束语通过以上步骤，我们就可以在 hexo 中使用 Mathjax 来书写数学公式。 参考文献 使用LaTex添加公式到Hexo博客里_20180803 在Hexo中渲染MathJax数学公式_20161229]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>LaTex</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在markdown中插入数学公式]]></title>
    <url>%2Fzai-markdown-zhong-cha-ru-shu-xue-gong-shi.html</url>
    <content type="text"><![CDATA[一些扩展的Markdown语法支持采用LaTex语法写数学公式，而在网页中使用Mathjax插件来显示数学公式。 本教程介绍如何在Markdown中书写数学公式。 插入数学公式在Markdown中插入数学公式的语法是$数学公式$和$$数学公式$$。 行内公式是可以让公式在文中与文字或其他东西混编，不独占一行。 实例 1质能方程$E = mc^2$ 显示质能方程 $E = mc^2$]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决Chrome浏览器中Flash Player无法播放问题]]></title>
    <url>%2Fjie-jue-chrome-liu-lan-qi-zhong-flash-player-wu-fa-bo-fang-wen-ti.html</url>
    <content type="text"><![CDATA[问题原因：因为Flash相对于HTML5，有着运算效率低、资源占用大、安全性不高等缺点，随着HTML5越来越普及，Adobe已宣布2020年正式停止支持Flash这项技术。 但Adobe公司为了利益最大化，从Flash Player 30开始，就与国内某公司合作，推出中国特供版Flash Player，根据特供版用户协议，Flash Player将捆绑应用、广告等推广业务，同时会获取用户信息并披露给第三方，用户不能追究数据泄漏的法律责任，相当霸王的条款。如果中国大陆用户安装的是国际版的Flash Player，那打开Flash时会提示“此Flash Player与您的地区不相容，请重新安装Flash”并拒绝播放Flash，一定要下载并安装特供版才予以正常播放（不知这是否是侵犯消费者的权益）。 解决办法： 卸载本机所有Flash Player 29.0.0.171及之后的版本，推荐使用“uninstall_flash_player”一次性搞定； 安装Flash Player 29.0.0.140（安装时记得断网，不然还是会自动跳转到最新版的下载地址，真是无。。。！不同浏览器安装包不同，如果网上找不到请联系KP君获取全浏览器版） 在安装最后一个界面，选择“从不检查更新”，或是在“控制面板”-“Flash Player 设备管理器”－“更新”页面，选择“从不检查更新”。 特别值得一提的是，Flash Player 29.0.0.171安装过程已取消最后一个界面，当全部更新为29.0.0.171后，“更新”页面也消失了，可理解为Flash Player 29.0.0.171屏蔽了用户对更新的选择权，不再有“从不检查更新”了，也就是可能会强制更新到特供版。 本以为这样安装完后就可以顺利使用，结果还是提示错误，差点吐血，只好再找找攻略，还好有发现： Chrome地址栏输入：chrome://version/，可以看到Flash的信息 1Flash 32.0.0.114 C:\Users\KPlayer\AppData\Local\Google\Chrome\User Data\PepperFlash\32.0.0.114\pepflashplayer.dll 找到之前安装的29版本的pepflashplayer.dll文件，通常在： 1C:\Windows\System32\Macromed\Flash\pepflashplayer64_29_0_0_140.dll 关闭Chrome，将pepflashplayer64_29_0_0_140.dll替换之前的pepflashplayer.dll，并重命名 重新打开Chrome，即可正常浏览Flash。 结论：Flash Player 29.0.0.140百度网盘下载链接:https://pan.baidu.com/s/1WKYEUemCfRP_b1KPcXohag 密码: r4i5 这或许是我们还会安装的最后一个版本！期待早日告别Flash这项落后的技术，期待Flash Player不尊重消费者的行为早点被唾弃！ 附录：V30前最后的几个版本号（发布日期：2018/5/8）Flash Player 29.0.0.171 (422 MB)（发布日期：2018/4/10）Flash Player 29.0.0.140 (422 MB)（发布日期：2018/3/13）Flash Player 29.0.0.113 (405 MB)（发布日期：2018/2/6）Flash Player 28.0.0.161 (408 MB)（发布日期：2018/1/9）Flash Player 28.0.0.137 (406 MB)（发布日期：2017/12/12）Flash Player 28.0.0.126 (405 MB)（发布日期：2017/11/14）Flash Player 27.0.0.187 (403 MB)（发布日期：2017/10/25）Flash Player 27.0.0.183 (404 MB)（发布日期：2017/10/16）Flash Player 27.0.0.170 (404 MB)（发布日期：2017/10/10）Flash Player 27.0.0.159 (405 MB)（发布日期：2017/9/12）Flash Player 27.0.0.130 (405 MB)（发布日期：2017/8/8）Flash Player 26.0.0.151 (404 MB)（发布日期：2017/7/11）Flash Player 26.0.0.137 (404 MB)（发布日期：2017/6/16）Flash Player 26.0.0.131 (404 MB)（发布日期：2017/6/13）Flash Player 26.0.0.126 (404 MB) 参考地址： 【教程】解决Chrome浏览器“此Flash Player与您的地区不相容，请重新安装Flash”报错 提示“此Flash Player与您的地区不相容，请重新安装Flash”的解决办法]]></content>
      <categories>
        <category>Chrome</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
        <tag>Flash Player</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo添加字数统计、阅读时长]]></title>
    <url>%2Fhexo-tian-jia-zi-shu-tong-ji-yue-du-shi-chang.html</url>
    <content type="text"><![CDATA[打开hexo目录，运行git bush，安装插件 1$ npm install hexo-symbols-count-time --save 修改博客网站配置文件，添加以下代码 12345symbols_count_time: symbols: true time: true total_symbols: true total_time: true 修改主题配置文件，搜索symbols_count_time，快速定位，修改成以下代码 123456symbols_count_time: separated_meta: true item_text_post: true item_text_total: false awl: 4 wpm: 275 重启服务 123hexo cleanhexo ghexo s]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown语法]]></title>
    <url>%2Fmarkdown-yu-fa.html</url>
    <content type="text"><![CDATA[主要内容： Markdown是什么？谁创造了它？为什么使用它？谁在用它?怎么使用它？ 正文1. Markdown是什么?Markdown是一种轻量级标记语言，它以纯文本形式(易读、易写、易更改)编写文档，并最终以HTML格式发布。Markdown也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。 Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。相比WYSIWYG编辑器● 优点：1、因为是纯文本，所以只要支持Markdown的地方都能获得一样的编辑效果，可以让作者摆脱排版的困扰，专心写作。2、操作简单。比如:WYSIWYG编辑时标记个标题，先选中内容，再点击导航栏的标题按钮，选择几级标题。要三个步骤。而Markdown只需要在标题内容前加#即可● 缺点：1、需要记一些语法（当然，是很简单。五分钟学会）。2、有些平台不支持Markdown编辑模式。 还好，简书是支持Markdown编辑模式的。1开启方式：设置-&gt;默认编辑器-&gt;Markdown编辑器 2.谁创造了它？它由Aaron Swartz和John Gruber共同设计，Aaron Swartz就是那位于去年（2013年1月11日）自杀,有着开挂一般人生经历的程序员。维基百科对他的介绍是：软件工程师、作家、政治组织者、互联网活动家、维基百科人。 14岁参与RSS 1.0规格标准的制订。 2004年入读斯坦福，之后退学。 2005年创建Infogami，之后与Reddit合并成为其合伙人。 2010年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。 2011年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。 2013年1月自杀身亡。 3.为什么要用它？ 它是易读（看起来舒服）、易写（语法简单）、易更改纯文本。处处体现着极简主义的影子。 兼容HTML，可以转换为HTML格式发布。 跨平台使用。 越来越多的网站支持Markdown。 更方便清晰地组织你的电子邮件。（Markdown-here, Airmail） 摆脱Word（我不是认真的）。 4. 谁在用它？Markdown的使用者： GitHub 简书 Stack Overflow Apollo Moodle Reddit 等等 5.怎么使用它？如果不算扩展，Markdown的语法绝对简单到让你爱不释手。Markdown语法主要分为如下几大部分：标题，段落，区块引用，代码区块，强调，分割线，链接，图片，反斜杠\，符号~等。 一、标题两种方式：● 方式1使用=和-标记一级和二级标题。1234一级标题=======二级标题------- 运行结果，如下： 一级标题二级标题● 方式2：使用#，可表示1-6级标题。 在想要设置为标题的文字前面加#来表示一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。示例：12345678```# 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题``` 运行结果，如下：123456# 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题 段落段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用两个以上空格加上回车（引用中换行省略回车）。段落：以一个空行开始，以一个空行结束，中间的就是一个段落。 二、字体● 加粗要加粗的文字左右分别用两个*号包起来1**加粗的字体** 运行结果，如下：加粗的字体● 斜体要倾斜的文字左右分别用一个*号包起来1*要倾斜的字体* 运行结果，如下：要倾斜的文字● 斜体加粗要倾斜和加粗的文字左右分别用三个*号包起来1***倾斜加粗的字体*** 运行结果，如下：倾斜加粗的字体● 删除线要加删除线的文字左右分别用两个~~号包起来1~~删除线的使用~~ 运行结果，如下：删除线的使用 三、引用在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;，n个···貌似可以一直加下去，但没神马卵用12345&gt;这是引用的内容1&gt;&gt;这是引用的内容2&gt;&gt;&gt;这是引用的内容3&gt;&gt;&gt;&gt;这是引用的内容4&gt;&gt;&gt;&gt;&gt;这是引用的内容5 运行结果，如下： 这是引用的内容1 这是引用的内容2 这是引用的内容3 这是引用的内容4 这是引用的内容5 四、分割线三个或者三个以上的 - 或者 * 都可以。1234-------******* 运行结果，如下： 五、图片1![图片alt](图片地址 &quot;图片title&quot;) 其中，图片alt就是显示图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加也可不加。示例：1![宠物](http://baiducdn.pig66.com/uploadfile/2017/0511/20170511074935785.jpg &quot;宠物狗狗&quot;) 运行结果，如下： 六、超链接语法：1[超链接名字](超链接地址 &quot;超链接title&quot;) 其中，”超链接title”可加也可不加。示例：12[简书](http://jianshu.com &quot;访问简书主页&quot;)[百度](http://www.baidu.com &quot;访问百度主页&quot;) 运行结果，如下：简书百度注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。1&lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名&lt;/a&gt; 示例1&lt;a href=&quot;https://www.jianshu.com/u/1f5ac0cf6a8b&quot; target=&quot;_blank&quot;&gt;简书&lt;/a&gt; 七、列表● 有序列表有序列表：使用 数字 加一个英文句点.123451. 有序列表2. 有序列表3. 有序列表4. 有序列表5. 有序列表 运行结果，如下： 有序列表 有序列表 有序列表 有序列表 有序列表 ● 无序列表语法：无序列表用&quot; - + *&quot;任何一种都可以123- 列表内容1+ 列表内容2* 列表内容3 注意：- + * 跟内容之间都要有一个空格，且结束列表时，需要中间空一行。运行结果，如下： 列表内容1 列表内容2 列表内容3 ● 列表嵌套上一级和下一级之间敲三个空格即可1234- 一级无序列表内容1 - 二级无序列表内容2 - 二级无序列表内容2 - 二级无序列表内容2 运行结果，如下： 一级无序列表内容1 二级无序列表内容2 二级无序列表内容2 二级无序列表内容2 1234+ 一级无序列表内容1 + 二级无序列表内容2 + 二级无序列表内容2 + 二级无序列表内容2 运行结果，如下： 一级无序列表内容1 二级无序列表内容2 二级无序列表内容2 二级无序列表内容2 1234* 一级无序列表内容1 * 二级无序列表内容2 * 二级无序列表内容2 * 二级无序列表内容2 运行结果，如下： 以及无序列表内容1 二级无序列表内容2 二级无序列表内容2 二级无序列表内容2 特别注意，如下这种情况： 一级无序列表内容1 二级无序列表内容2 二级无序列表内容2 二级无序列表内容2 三级无序列表内容3 三级无序列表内容3 三级无序列表内容3 二级无序列表内容2 一级无序列表内容1（不知道为什么？加入字体高亮度显示时，会出错） 运行结果，如下： 一级无序列表内容1 二级无序列表内容2 二级无序列表内容2 二级无序列表内容2 三级无序列表内容3 三级无序列表内容3 三级无序列表内容3 二级无序列表内容2 一级无序列表内容1 注意：这里想说明的是不同级别之间要有换行，如果不换行，默认还是上一级别。但是，这里实验可以发现这个问题已经不存在啦。 八、表格语法：1234表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容 说明：第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左■两边加：表示文字居中■右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略示例：12345姓名|技能|排行----|:--:|--:刘备|哭|大哥关羽|打|二哥张飞|骂|二哥 运行结果，如下：（表语与上文要空一行，否则会错乱） 姓名 技能 排行 刘备 哭 大哥 关羽 打 二哥 张飞 骂 二哥 九、代码语法：● 单行代码：代码之间分别用一个反引号包起来1`代码内容` ● 代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行12345``` 代码... 代码... 代码...``` 示例：单行代码1`create database hero;` 运行结果，如下：create database hero;代码块123456``` function fun()&#123; echo &quot;这是一句非常牛逼的代码&quot;; &#125; fun();``` 运行结果，如下：1234function fun()&#123; echo &quot;这是一句非常牛逼的代码&quot;;&#125;fun(); 十、流程图123456789```flowst=&gt;start: 开始op=&gt;operation: My Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op&amp;``` 运行结果，如下：12345678st=&gt;start: 开始op=&gt;operation: My Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op&amp; (注意，这里并未打印出流程图，不知道什么原因？) 十一、显示网址● 写法1：123超链接：[连接名称](网址 , 标题)[我是链接名](http://www.izhangbo.cn, "我是标题")[&lt;i class="icon-refresh"&gt;&lt;/i&gt; 点我刷新](/sonfilename/) ● 写法2：1234另一种超链接写法：[链接名][链接代号][here][3]然后在别的地方定义 3 这个详细链接信息，[3]: http://www.izhangbo.cn "聚牛团队" 直接展示链接的写法：1&lt;http://www.izhangbo.cn&gt; 十二、反引号code格式：反引号Use the printf() function.1``There is a literal backtick (`) here.针对在代码区段内插入反引号的情况`` There is a literal backtick (`) here.针对在代码区段内插入反引号的情况 参考文献Markdown基本语法 网址：https://www.jianshu.com/p/191d1e21f7edyounghz/Markdown 网址：https://github.com/younghz/Markdown掌握这几种 Markdown 语法Markdown 语法说明 (简体中文版)]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo中插入图片的方法]]></title>
    <url>%2Fhexo-zhong-cha-ru-tu-pian-de-fang-fa.html</url>
    <content type="text"><![CDATA[在写文章时，常常有配图说明的需求。Hexo有多种图片插入方式，可以将图片存放在本地引用或者将图片放在CDN上引用。 插入本地图片绝对路径本地图片统一放在source/images文件夹中。 使用Markdown语法1231 ![](/images/test.jpg)2 helllsfl3 fslfml 注意： ●images的名字可以改变，比如images0,images1,等 ●images前面的”/“，必须要有，且不可写source，格式固定。 使用Html语法1&lt;img src="/images/test.jpg"&gt; 相对路径使用插件1、把根目录下的配置文件_config.yml里的post_asset_folder选项设置为true；1234567891011121314151617181920212223242526272829301 # 文章配置2 # 这个地方一般直接取默认值不用修改3 # Writing4 new_post_name: :title.md # File name of new posts # 新文章的文件名称5 default_layout: post # 预设布局6 titlecase: false # Transform title into titlecase # 把标题转换为 titlecase（titlecase指的是将每个单词首字母转换成大写）7 external_link: true # Open external links in new tab # 在新标签中打开链接8 filename_case: 0 # 把文件名称转换为 (1) 小写或 (2) 大写, 0表示不变9 render_drafts: false # 显示草稿10 post_asset_folder: true # 启动 Asset 文件夹11 relative_link: false # 启动 Asset 文件夹12 future: true # 显示未来的文章13 highlight: # 代码块的设置14 enable: true15 line_number: true # 是否显示行号16 auto_detect: false # 是否自动监测17 tab_replace: # 将 tab 替换成其他字符串``` 2、在你的hexo目录下执行这句话npm install hexo-asset-image --save，这是下载安装一个可以上传本地图片的插件：``` bashhuangsengolndeMacBook-Pro:hexo-blog huangaengoln$ npm install hexo-asset-image --save(node:59464) fs: re-evaluating native module sources is not supported. If you are using the graceful-fs module, please update it to a more recent version.hexo-site@0.0.0 /Users/huangaengoln/Documents/hexo-blog└─┬ hexo-asset-image@0.0.3 └─┬ cheerio@0.19.0 ├─┬ css-select@1.0.0 │ ├── css-what@1.0.0 │ └── domutils@1.4.3 └── lodash@3.10.1 huangsengolndeMacBook-Pro:hexo-blog huangaengoln$ 3、下载完成后，下次再执行hexo n “1How-to-change-App-theme-color”来生成md博文时，/source/_posts文件夹内除了1How-to-change-App-theme-color.md文件，还有一个与之同名的文件夹；4、最后在1How-to-change-App-theme-color.md中想引入图片时，先把图片复制到md对应的文件夹1How-to-change-App-theme-color中，然后只需要1How-to-change-App-theme-color.md中按照markdown的格式引入图片：11 ![你想输入的替代文字](xxxx/图片名.jpg) 注意：xxxx是这个md文件的名字，也是同名文件夹的名字，你想引入的图片就只需要放入xxxx这个文件夹内就好了，很像引用相对路径。5、最后检查一下，hexo g生成页面后，进入public\2017\02\26\index.html文件中查看相关字段，可以发现，html标签内的语句是插入网络图片使用Markdown语法1![](网络图片地址) 使用Html语法1&lt;img src="网络图片地址"&gt; 使用图床可以把你的图片上传到 七牛之类的服务器，然后直接按照markdown的方式使用。例如可以使用github作为图床， CDN引用除了在本地存储图片，还可以将图片上传到一些免费的CDN服务中。比如Cloudinary提供的图片CDN服务，在Cloudinary中上传图片后，会生成对应的url地址，将地址直接拿来引用即可。(来源：Yan Yinhong)]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Github与Hexo搭建个人博客]]></title>
    <url>%2Fshi-yong-github-yu-hexo-da-jian-ge-ren-bo-ke.html</url>
    <content type="text"><![CDATA[摘要：这是一篇有关如何使用Github Pages和Hexo搭建自己独立博客的详尽教程，里面介绍了如何使用和配置Hexo框架，如何将Hexo部署到自己的Github项目中，域名注册，以及域名的绑定，还有我在搭建自己博客过程中所遇到的各种困难。 前言一名安卓入门开发者，但，我只是入门！而且我对网站开发以及前端的知识几乎是零基础，所以在自己刚接触这个东西的时候，我像很多人一样，都是上网找教程，但是要知道，那都是程序员的教程。所以对于我这个网站技术小白来说，真是很难受，所以藉此机会写一篇让小白看得懂的教程。如果你是一个小白而且又想做自己的博客，可以，请跟着我的脚步，我会带你真真正正做一个属于你自己的博客。 入门门槛 必须耐得住折腾。 刻苦的学习精神和耐心 关于Github一、Github的优点 GitHub是基于git实现的代码托管。git可能是目前最好用的版本控制系统了，非常受欢迎。 GitHub可以免费使用，并且快速稳定。 Github上面的世界很精彩，用久了你的眼界会开阔很多。 二、什么是Github PagesGithub Pages可以被认为是用户编写的、托管在github上的静态网页。 三、为什么要使用Github Pages 可以绑定你的域名(但暂时貌似只能绑定一个)。 简单快捷，使用Github Pages可以为你提供一个免费的服务器，免去了自己搭建服务器和写数据库的麻烦。 安装Node.js在 Windows 环境下安装 Node.js 非常简单，仅须到官网下载安装文件并执行即可完成安装。像我的是Windows 64位，直接下载安装，无脑下一步就行了，不需要配置环境变量。 安装Git去Git官网根据你的电脑参数，下载对应版本。 下载完成，通过在命令行输入git version查看是否安装成功，有输出版本号说明安装成功。 鼠标邮件菜单里就多了Git GUI Here和Git Bash Here两个按钮，一个是图形界面的Git操作，一个是命令行，我们选择Git Bash Here。 安装教程：如何在windows下安装Git Git入门教程: Pro Git(中文版) Git基本操作： HexoHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 一、Hexo安装桌面右键鼠标，点击Git Bash Here，输入npm命令即可安装12npm install hexo-cli -gnpm install hexo-deployer-git --save 第一句是安装hexo，第二句是安装hexo部署到git page的deployer，两个都需要安装。如下图即安装完成。 二、Hexo初始化配置创建Hexo文件夹安装完成后，根据自己喜好建立目录（如F:\Blog\Hexo），直接进入F:\Blog\Hexo文件夹下右键鼠标，点击Git Bash Here，进入Git命令框，执行以下操作。1$ hexo init 安装 Hexo 完成后，Hexo 将会在指定文件夹中新建所需要的文件。Hexo文件夹下的目录如下： 本地查看效果执行下面语句，执行完即可登录localhost:4000查看效果12hexo generatehexo server 登录localhost:4000，即可看到本地的效果如下： 将博客部署到Github Pages上那么现在本地的博客已经搭建起来了，但是我们只可以通过本地连接查看我们的博客。那么我们现在需要做的就是把本地的博客发布到服务器上，让别人也可以连接我们的博客，而Github Pages就帮我完成了这件事情。但是Github Pages的代码就是寄存在Github上面的。那么接下来我们需要在Github上面创建一个新的项目。 一、注册Github账户 访问Github首页 点击右上角的Sign Up，注册自己的账户 二、创建项目代码库 注册完登陆后，我们就创建一个我们自己的Github Pages项目。点击New repository。 创建要点如下： 三、配置SSH密钥配置Github的SSH密钥可以让本地git项目与远程的github建立联系，让我们在本地写了代码之后直接通过git操作就可以实现本地代码库与Github代码库同步。操作如下： 第一步、看看是否存在SSH密钥(keys)首先，我们需要看看是否看看本机是否存在SSH keys,打开Git Bash,并运行:1$ cd ~/. ssh 检查你本机用户home目录下是否存在.ssh目录 如果，不存在此目录，则进行第二步操作，否则，你本机已经存在ssh公钥和私钥，可以略过第二步，直接进入第三步操作。 第二步、创建一对新的SSH密钥(keys)1234$ssh-keygen -t rsa -C "your_email@example.com"#这将按照你提供的邮箱地址，创建一对密钥Generating public/private rsa key pair.Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter] 直接回车，则将密钥按默认文件进行存储。此时也可以输入特定的文件名，比如/c/Users/you/.ssh/github_rsa 接着，根据提示，你需要输入密码和确认密码（说到这里，如果你很放心，其实可以不用密码，就是到输密码的地方，都直接回车，所以每次push就只管回车就行了。所谓的最安全的密码，就是没有密码 哈哈）。相关提示如下： 12Enter passphrase (empty for no passphrase): [Type a passphrase]Enter same passphrase again: [Type passphrase again] 输入完成之后，屏幕会显示如下信息： 1234Your identification has been saved in /c/Users/you/.ssh/id_rsa.Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.The key fingerprint is:01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com 第三步、在GitHub账户中添加你的公钥运行如下命令，将公钥的内容复制到系统粘贴板(clipboard)中。1clip &lt; ~/.ssh/id_rsa.pub 接着： 登陆GitHub,进入你的Account Settings. 选择SSH Keys 粘贴密钥，添加即可 第四步、测试可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改：1$ ssh -T git@github.com 如果是下面的反馈： 123The authenticity of host 'github.com (207.97.227.239)' can't be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)? 不要紧张，输入yes就好，然后会看到： 第五步、设置用户信息现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字根据自己的喜好自己取，而不是GitHub的昵称。 12$ git config --global user.name "ryanlijianchang"//用户名$ git config --global user.email "liji.anchang@163.com"//填写自己的邮箱 第六步、SSH Key配置成功本机已成功连接到github。 四、将本地的Hexo文件更新到Github的库中第一步、登录Github打开自己的项目 username.github.io 第二步、打开之后，点击SSH，选择SSH类型地址 第三步、复制地址 第四步、打开你一开始创建的Hexo文件夹（如F:\Blog\Hexo），用记事本打开刚文件夹下的_config.yml文件 第五步、在配置文件里作如下修改，保存 第六步、在Hexo文件夹下执行：12hexo ghexo d 或者直接执行1hexo g -d 执行完之后会让你输入github的账号和密码，输入完后就可以登录我们自己的部署在Github Pages服务器上的博客了。对应的地址是 username.github.io(我的是：ryanlijianchang.github.io)。 假如这时候，报错 ERROR Deployer not found: git，那么就是你的deployer没有安装成功，你需要执行如下命令再安装一次： 1npm install hexo-deployer-git --saved 这样，你再执行hexo g -d，你的博客就部署到Github上了。 第七步、在浏览器上输入自己的主页地址 在浏览器上输入Github Pager为我们生成的外链（例如我的是：ryanlijianchang.github.io/，而你的只需要把你的github用户名替换掉这个链接中的ryanlijianchang，因为我的用户名是这个，那么你自己的专属博客地址就是：https://[您的用户名].github.io/）即可看到自己的博客了。 当然，每一个人都可以通过这个地址访问到你的博客了。 美化自己博客那么现在我们的博客已经挂在了Github服务器上面，别人已经可以通过地址来登陆我们的博客了，但是我们这时就有了新的需求，就是自己的博客并不好看，那怎么办的？这很简单，要知道很多前端开发者在Hexo框架下开发了很多的主题给我们使用，我们只需要把他们的主题克隆过来，然后通过修改配置文件即可达到我们所需要的效果。 那么我们应该怎么修改呢？ 一、进入Hexo的官网主题专栏 二、挑选我们喜欢的主题可以看到有很多主题给我们选，我们只要选择喜欢的主题点击进去，然后进入到它的github地址，我们只要把这个地址复制下来(例如我是选择：hexo-theme-next这个主题) 三、克隆主题再打开Hexo文件夹下的themes目录（F:\Blog\hexo\themes），右键Git Bash，在命令行输入: 1git clone https://github.com/iissnan/hexo-theme-next(此处地址替换成你需要使用的主题的地址) 下载中，等待下载完成： 四、修改Hexo配置文件下载完成后，打开Hexo文件夹下的配置文件_config.yml修改参数为：theme: hexo-theme-next 五、部署主题，本地查看效果返回Hexo目录，右键Git Bash，输入 12hexo ghexo s 打开浏览器，输入http://localhost:4000/ 即可看见我们的主题已经更换了。 六、如果效果满意，将它部署到Github上打开Hexo文件夹，右键Git Bash，输入 12hexo clean (必须要，不然有时因为缓存问题，服务器更新不了主题)hexo g -d 七、打开自己的主页，即可看到修改后的效果更多修改效果请查看对应主题的说明文档，点击此查看本主题(Next)对应的说明文档。 在博客写文章一、用hexo发表新文章1$ hexo n "文章标题" 其中 我的家 为文章标题，执行命令hexo n“我的家” 后，会在项目\Hexo\source_posts中生成我的家.md文件，用编辑器打开编写即可。 当然，也可以直接在\Hexo\source_posts中新建一个md文件，我就是这么做的。写完后，推送到服务器上，执行以下命令即可在我们的站点看到新的文章。 12$ hexo g #生成$ hexo d #部署 # 可与hexo g合并为 hexo d -g 二、用Markdown写文章我们注意到在 \Hexo\source_posts 文件夹下存放着我们的文章，它们的格式都是以.md格式结尾的，没错，Hexo也是支持Markdown语法的，所以当我们需要写具有格式化的文章时，我们可以使用支持Markdown语法的编辑器进行文章编译，然后保存文件到 \Hexo\source_posts 文件夹下即可。 复制进去之后，只要执行 1$ hexo d -g 推送到我们的Github仓库即可。 那么什么是Markdown？ Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。 Markdown有什么优点？ 专注你的文字内容而不是排版样式。 轻松的导出 HTML、PDF 和本身的 .md 文件。 纯文本内容，兼容所有的文本编辑器与字处理软件。 可读，直观。适合所有人的写作语言。 我该用什么工具？ Windows下可以使用 MarkdownPad2。 在 Mac OS X 上，我建议你用 Mou 这款免费且十分好用的 Markdown 编辑器。 Web 端上，我强烈推荐 简书 这款产品。 关于Markdown的更多资料可以查看如下： 认识与入门 Markdown Markdown入门指南 将自己的域名关联到Github Pages上很多朋友创建了自己的博客之后会选择买一个属于自己的域名，然后将自己域名绑定到自己的Github Pages博客上，其实这也并不难，只要你有个域名。 一、购买域名如果你不是很有钱，在阿里云上，你只要几块钱就可以买到一个域名。 选择你喜欢的域名，然后购买即可 二、配置CNAME文件在 \hexo\source 文件夹下创建文件 CNAME （新建记事本文件命名CNAME，然后打开） 内容为你的域名，例如我的域名是：ryane.top 在Hexo文件夹提交 1hexo g -d 三、修改DNS 如果你是在阿里云购买域名的话，请登录阿里云网站。打开个人中心，点击域名 选择管理 修改DNS为12f1g1ns2.dnspod.net f1g1ns1.dnspod.net 四、域名解析 打开DNSPOD，注册一个账户 点击添加域名，把你的域名添加进去，如无意外，添加完之后就是以下这个状态 此时点击添加记录，添加两个记录，一个主机记录为@， 一个为www，而记录值都是填同一个，填你的博客主页对应的ip，添加完后如下。 但是如何获取ip值呢？打开运行，输入cmd，打开命令窗口输入 ping 主页地址 ， 红色部分即为你的ip值 将IP输入过去，然后会提示你到域名注册的地方修改DNS。等待生效，最迟72小时生效。即可通过你的域名浏览你的博客主页。 结语当你完成了你的博客之后，相信你的心情跟我刚做完的心情是一样的，即便很累，但是当自己的博客成型之后，自己还是有一个成就感的，那么完成后，以后的路还很长，真正想要自己博客能够积累人气，还得靠好的内容，所以认真写文章吧，相信你会受益于此的。 如果大家有什么问题的话，可以在我留言板下留言，我看到评论时会第一时间回答大家。 参考资料： Markdown入门手册中文版 Markdown–入门指南 如何搭建一个独立博客——简明 Github Pages与 jekyll 教程 by cnfeat Hexo搭建Github静态博客 by 金石开 使用SSH密钥连接Github【图文教程】 by 轩枫 搭建自己的博客 Github: 参考视频《Hexo博客+Next主题教程》(第二版)-建站]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fhello-world.html</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
